mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n()) %>%
filter(nro == 2) %>%
distinct(X1)
View(a)
tmp2 <- read_tsv("new.protein.info.tsv", col_names = FALSE)
new <- tmp2 %>%
filter(!X7 %in% a$X1)
nrow(new)
# For FUSION
tmp <- read_table(file = "filelistFUSION.txt", col_names = FALSE)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n()) %>%
filter(nro == 2) %>%
distinct(X1)
tmp2 <- read_tsv("new.protein.info.tsv", col_names = FALSE)
new <- tmp2 %>%
filter(!X7 %in% a$X1)
nrow(new)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n())
tmp <- read_table(file = "filelist.txt", col_names = FALSE)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n()) %>%
filter(nro == 2) %>%
distinct(X1)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n())
new <- tmp2 %>%
filter(!X7 %in% a$X1)
nrow(new)
# For FUSION
tmp <- read_table(file = "filelistFUSION.txt", col_names = FALSE)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n()) %>%
filter(nro == 2) %>%
distinct(X1)
new <- tmp2 %>%
filter(!X7 %in% a$X1)
nrow(new)
tmp <- read_table(file = "filelist.txt", col_names = FALSE)
a <- tmp %>%
#group_by(1:n()) %>%
mutate(suffix = ifelse(grepl(".hsq", X1), "hsq",
ifelse(grepl("wgt.RDat", X1), "wgt.RDat", NA)),
X1 = gsub(".hsq", "", X1),
X1 = gsub(".wgt.RDat", "", X1)) %>%
group_by(X1) %>%
mutate(status = all(c("wgt.RDat", "hsq") %in% suffix),
nro = n()) %>%
filter(nro == 2) %>%
distinct(X1)
new <- tmp2 %>%
filter(!X7 %in% a$X1)
nrow(new)
250*12*4
1.8*7/365
1200*1.8*7/365
-309.838/253.869
setwd("~/Google Drive/USCStudy/2020Summer/PM579/PM579Project/PM579FinalProject")
library(limma)
library(ggplot2)
library(matrixStats)
library(tidyverse)
library(genefilter)
library(qvalue)
library(glmnet)
library(randomForest)
library(e1071)
library(knitr)
dd1 = read_csv("data/data_set_ALL_AML_independent.csv")
dd2 = read_csv("data/data_set_ALL_AML_train.csv")
alldd = left_join(dd1, dd2, by = c("Gene Description", "Gene Accession Number")) %>%
select(-`Gene Accession Number`)
dropcol <- which(!grepl("call", colnames(alldd)))
tmpdd <- t(as.matrix(alldd[dropcol]))
colN <- tmpdd[1, ]
tmpdd <- tmpdd[-1, ]
tmpdd <- cbind(rownames(tmpdd), tmpdd)
tmpdd <- as.data.frame(tmpdd)
colnames(tmpdd) <- c("patient", paste0("Gene", 1:7129))
rownames(tmpdd) <- NULL
ddWIDE <- read_csv("data/datasets_1868_3249_actual.csv") %>%
mutate(patient = as.character(patient)) %>%
left_join(tmpdd, by = "patient") %>%
mutate(cancer = ifelse(cancer == "ALL", 1, ifelse(cancer == "AML", 0, NA))) %>%
mutate_at(vars(-cancer), as.numeric) %>%
as.data.frame
ddLONG <- mutate(alldd[dropcol], `Gene Description` = paste0("Gene", 1:7129)) %>%
rename(Var = `Gene Description`) %>%
as.data.frame
ddLONG <- ddLONG[c(1, order(as.numeric(colnames(ddLONG[, -1]))) + 1)]
tmp <- ddLONG[, -1]
fmad  <- matrixStats::rowMads(as.matrix(tmp))
rfmad <- rank(-fmad)
fidx <- which(rfmad <= 500)
ddWIDE500 <- ddWIDE[c(1, 2, fidx + 2)]
ddLONG500 <- ddLONG[fidx, ]
ddPatient <- read_csv("data/datasets_1868_3249_actual.csv") %>%
mutate(patient = as.character(patient),
cancer = factor(cancer, levels = c("ALL", "AML")))
knitr::opts_chunk$set(echo = TRUE)
library(limma)
library(ggplot2)
library(matrixStats)
library(tidyverse)
library(genefilter)
library(qvalue)
library(glmnet)
library(randomForest)
library(e1071)
library(knitr)
dd1 = read_csv("data/data_set_ALL_AML_independent.csv")
dd2 = read_csv("data/data_set_ALL_AML_train.csv")
alldd = left_join(dd1, dd2, by = c("Gene Description", "Gene Accession Number")) %>%
select(-`Gene Accession Number`)
dropcol <- which(!grepl("call", colnames(alldd)))
tmpdd <- t(as.matrix(alldd[dropcol]))
colN <- tmpdd[1, ]
tmpdd <- tmpdd[-1, ]
tmpdd <- cbind(rownames(tmpdd), tmpdd)
tmpdd <- as.data.frame(tmpdd)
colnames(tmpdd) <- c("patient", paste0("Gene", 1:7129))
rownames(tmpdd) <- NULL
ddWIDE <- read_csv("data/datasets_1868_3249_actual.csv") %>%
mutate(patient = as.character(patient)) %>%
left_join(tmpdd, by = "patient") %>%
mutate(cancer = ifelse(cancer == "ALL", 1, ifelse(cancer == "AML", 0, NA))) %>%
mutate_at(vars(-cancer), as.numeric) %>%
as.data.frame
ddLONG <- mutate(alldd[dropcol], `Gene Description` = paste0("Gene", 1:7129)) %>%
rename(Var = `Gene Description`) %>%
as.data.frame
ddLONG <- ddLONG[c(1, order(as.numeric(colnames(ddLONG[, -1]))) + 1)]
tmp <- ddLONG[, -1]
fmad  <- matrixStats::rowMads(as.matrix(tmp))
rfmad <- rank(-fmad)
fidx <- which(rfmad <= 500)
ddWIDE500 <- ddWIDE[c(1, 2, fidx + 2)]
ddLONG500 <- ddLONG[fidx, ]
ddPatient <- read_csv("data/datasets_1868_3249_actual.csv") %>%
mutate(patient = as.character(patient),
cancer = factor(cancer, levels = c("ALL", "AML")))
dat1 <- ddWIDE500 %>%
mutate(y = as.factor(cancer)) %>%
select(-c(1:2)) %>%
data.matrix
#glmnet prefer data.matrix as for as.matrix
x <- dat1[, -ncol(dat1)]
y <- dat1[, ncol(dat1)]
set.seed(666)
train_rows <- sample(1:nrow(dat1), 50)
x.train <- x[train_rows, ]
x.test <- x[-train_rows, ]
y.train <- y[train_rows]
y.test <- y[-train_rows]
col1 <- vector()
for (i in 0:10) {
temp <-  cv.glmnet(x.train, y.train, type.measure = "class",
alpha = i/10, family = "binomial")
err.min <- temp$cvm[temp$lambda == temp$lambda.1se]
col1[i+1] = err.min
}
for (i in 0:10) {
temp <-  cv.glmnet(x.train, y.train, type.measure = "class",
alpha = i/10, family = "binomial")
err.min <- temp$cvm[temp$lambda == temp$lambda.1se]
col1[i+1] = err.min
}
col2 <- seq(0,1,0.1)
errout <- cbind(col1,col2)
colnames(errout) <- c("Error", "Alpha")
kable(errout, caption = "Table 1")
col2 <- seq(0,1,0.1)
errout <- cbind(col1,col2)
colnames(errout) <- c("Error", "Alpha")
kable(errout, caption = "Table 1")
plot(fit.elnet, xvar = "lambda", main = "Figure 2: Srinkage of Coefficients")
fit1 <- cv.glmnet(x.train, y.train, type.measure = "class",
alpha = 0.1,family = "binomial")
plot(fit1, main = "Figure 3: Elastic Net")
yhat <- predict(fit1, s=fit1$lambda.1se,type = "class", newx = x.test) %>%
as.factor
fit.elnet <- glmnet(x.train, y.train, family = "binomial", alpha = 0.1)
plot(fit.elnet, xvar = "lambda", main = "Figure 2: Srinkage of Coefficients")
fit1 <- cv.glmnet(x.train, y.train, type.measure = "class",
alpha = 0.1,family = "binomial")
plot(fit1, main = "Figure 3: Elastic Net")
yhat <- predict(fit1, s=fit1$lambda.1se,type = "class", newx = x.test) %>%
as.factor
enetT <- table(yhat, y.test)
rownames(enetT) <- c("Classified as AML", "Classified as ALL")
colnames(enetT) <- c("True AML", "True ALL")
#kable(enetT, caption = "ENET Classification")
coef(fit1, s="lambda.min")[which(coef(fit1, s="lambda.min") != 0)]
myCoefs <- coef(fit1, s="lambda.min")
myCoefs[which(myCoefs != 0 ) ]
myCoefs@Dimnames[[1]][which(myCoefs != 0 ) ]
myResults <- data.frame(  features = myCoefs@Dimnames[[1]][ which(myCoefs != 0 ) ],
coefs = myCoefs[which(myCoefs != 0 )])
myResults
pp = myResults[order(myResults$coefs,decreasing = T),]
print(pp)
pp <- myResults[order(myResults$coefs, decreasing = TRUE), ][1:30, ]
View(pp)
pp <- myResults[order(myResults$coefs, decreasing = TRUE), ][1:10, ]
pp <- myResults[order(myResults$coefs, decreasing = TRUE), ][2:11, 1]
pp
?varImpPlot
varImpPlot(rf3, main = "", n.var = 10)
set.seed(666)
train_id <- sample(nrow(ddWIDE),50)
dat500 <- mutate(ddWIDE500,cancer = as.factor(cancer))
dat_model <- dat500[,-1]
train <- dat_model[train_id,]
test <- dat_model[-train_id,]
rf <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 100, importance = TRUE)
rf2 <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 200, importance = TRUE)
rf3 <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 130, importance = TRUE)
layout(matrix(c(1,2), nrow = 1), width = c(4, 1))
par(mar = c(5, 4, 4, 0))
plot(rf2, main = "Figure 4: Random Forest with Increasing Number of Trees")
par(mar = c(5, 0, 4, 2))
plot(c(0, 1), type = "n", axes = FALSE, xlab = "", ylab = "", main = "")
legend("top", colnames(rf2$err.rate), col = 1:4, cex = 0.8, fill = 1:4)
varImpPlot(rf3, main = "", n.var = 10)
importance(rf2)
importance(rf2)[10, ]
class(importance(rf2))
a <- as.data.frame(importance(rf2))
str(a)
a <- as.data.frame(importance(rf2))[1:10, ]
a
a1 <- a[order(a$MeanDecreaseAccuracy, decreasing = TRUE), ]
head(a1)
a$MeanDecreaseAccuracy
a <- as.data.frame(importance(rf2))
a1 <- a[order(a$MeanDecreaseAccuracy, decreasing = TRUE), ]
head(a1)
a1 <- rownames(a1)
a1
a1 <- a[order(a$MeanDecreaseAccuracy, decreasing = TRUE), ]
a1 <- rownames(a1)[1:10]
a1
a2 <- a[order(a$MeanDecreaseGini, decreasing = TRUE), ]
a2 <- rownames(a2)[1:10]
a1
a2
rfT <- table(yhat_rf3, test$cancer)
rownames(rfT) <- c("Classified as AML", "Classified as ALL")
yhat_rf3 <- predict(rf3, newdata = test)
a <- as.data.frame(importance(rf2))
a1 <- a[order(a$MeanDecreaseAccuracy, decreasing = TRUE), ]
a1 <- rownames(a1)[1:10]
a2 <- a[order(a$MeanDecreaseGini, decreasing = TRUE), ]
a2 <- rownames(a2)[1:10]
rfT <- table(yhat_rf3, test$cancer)
rownames(rfT) <- c("Classified as AML", "Classified as ALL")
colnames(rfT) <- c("True AML", "True ALL")
kable(rfT, caption = "Random Forrest Classification")
rft
rfT
enet
enett
enetT
rfT
svmlT
#Linear Boundary
tune_out <- tune(svm,cancer~., data = train, kernel = "linear",
ranges = list(cost = c(0.001,0.01,0.1,1,5,10,100)))
#Linear Boundary
tune_out <- tune(svm,cancer~., data = train, kernel = "linear",
ranges = list(cost = c(0.001,0.01,0.1,1,5,10,100)))
#summary(tune_out)
bestmod <- tune_out$best.model
#summary(bestmod)
#predict results
yhat_svm_linear <- predict(bestmod, test)
svmlT <- table(yhat_svm_linear, test$cancer)
rownames(svmlT) <- c("Classified as AML", "Classified as ALL")
colnames(svmlT) <- c("True AML", "True ALL")
kable(svmlT, caption = "SVM Classification with Linear Kernel")
#svm with polynomial boundary
tune_out_non2 <- tune(svm,cancer~., data = train, kernel = "polynomial",
ranges = list(cost = c(0.001,0.01,0.1,1,5,10,100)))
#summary(tune_out_non2)
bestmod_non2 <- tune_out_non2$best.model
#summary(bestmod_non2)
#predict results
yhat_svm_non2 = predict(bestmod_non2,test)
svmpT <- table(yhat_svm_non2, test$cancer)
rownames(svmpT) <- c("Classified as AML", "Classified as ALL")
colnames(svmpT) <- c("True AML", "True ALL")
kable(svmpT, caption = "SVM Classification with Polynomial Kernel")
cc <- enetT %>%
bind_rows(rfT, svmlT, svmpT)
cc <- enetT %>%
bind_rows(rfT)
cc <- enetT %>%
bind_rows(rfT, svmlT, svmpT)
enetT
rfT
class(enetT)
cc <- as.data.frame(enetT) %>%
bind_rows(as.data.frame(rfT))
cc
?bind_rows
myResults <- data.frame(features = myCoefs@Dimnames[[1]][which(myCoefs != 0)],
coefs = myCoefs[which(myCoefs != 0 )])
myResults$coefs <- abs(myResults$coefs)
pp <- myResults[order(myResults$coefs, decreasing = TRUE), ][2:11, 1]
pp
pp
a1
a2
tmp <- as.matrix(ddWIDE500[, -c(1, 2)])
sdTMP <- scale(tmp, center = TRUE, scale = matrixStats::colMads(tmp))
tt <- colttests(sdTMP, ddPatient$cancer)
pval <- p.adjust(tt$p.value,method="bonferroni")
tt$p.value <- pval
View(tt)
tt <- tt[order(tt$p.value, decreasing = TRUE), ]
tt <- tt[order(tt$p.value), ]
tt <- rownames(tt)
tt <- colttests(sdTMP, ddPatient$cancer)
pval <- p.adjust(tt$p.value,method="bonferroni")
tt$p.value <- pval
tt <- tt[order(tt$p.value), ]
tt <- rownames(tt)[1:10]
# Top 10 genes table
comb <- cbind(pp, a1, a2, tt)
comb
comb <- cbind(pp[order(pp)], a1[order(a1)], a2[order(a2)], tt[order(tt)])
comb
enetT
3/22
19/22
enetT <- as.data.frame(enetT) %>%
mutate(Method = "ENET",
Classfied = c("AML", "ALL"))
enetT <- as.data.frame(enetT)
enetT
enetT <- as.data.frame(as.matrix(enetT)) %>%
mutate(Method = "ENET",
Classfied = c("AML", "ALL"))
as.data.frame(as.matrix(enetT))
enetT
enetT <- table(yhat, y.test)
enetT
as.matrix(enetT)
as.data.frame(enetT)
enetT <- as.data.frame(as.matrix(enetT)) %>%
mutate(Method = "ENET",
Classfied = c("AML", "ALL"))
as.matrix(enetT)
as.data.frame(as.matrix(enetT))
as.matrix(enetT)
dim(as.matrix(enetT))
class(as.matrix(enetT))
as.data.frame(enetT)
enetT
data.frame(enetT)
enetT <- table(yhat, y.test)
rownames(enetT) <- c("Classified as AML", "Classified as ALL")
colnames(enetT) <- c("True AML", "True ALL")
rfT <- table(yhat_rf3, test$cancer)
rownames(rfT) <- c("Classified as AML", "Classified as ALL")
colnames(rfT) <- c("True AML", "True ALL")
svmlT <- table(yhat_svm_linear, test$cancer)
rownames(svmlT) <- c("Classified as AML", "Classified as ALL")
colnames(svmlT) <- c("True AML", "True ALL")
svmpT <- table(yhat_svm_non2, test$cancer)
rownames(svmpT) <- c("Classified as AML", "Classified as ALL")
colnames(svmpT) <- c("True AML", "True ALL")
as.data.frame(enetT)
cc <- as.data.frame(enetT) %>%
bind_cols(as.data.frame(rfT), as.data.frame(svmlT), as.data.frame(svmpT))
cc
View(cc)
enetT
enetT <- as.data.frame(enetT)
enetT
enetT <- as.data.frame(enetT) %>%
colnames(enetT) <- c("Classified", "True", "ENET")
colnames(enetT) <- c("Classified", "True", "ENET")
enetT
rfT <- as.data.frame(rfT)
colnames(rfT) <- c("Classified", "True", "RF")
svmlT <- as.data.frame(svmlT)
colnames(svmlT) <- c("Classified", "True", "SVM (Linear)")
svmpT <- as.data.frame(svmpT)
colnames(svmpT) <- c("Classified", "True", "SVM (Polynomial)")
cc <- enetT %>%
left_join(rfT,
by = c("Classified", "True")) %>%
left_join(svmlT,
by = c("Classified", "True")) %>%
left_join(svmpT,
by = c("Classified", "True"))
cc
cc <- enetT %>%
left_join(rfT, by = c("Classified", "True")) %>%
left_join(svmlT, by = c("Classified", "True")) %>%
left_join(svmpT, by = c("Classified", "True")) %>%
mutate(Classified = c("AML", "ALL", "AML", "ALL"),
True = c("AML", "AML", "ALL", "ALL"))
cc
3/22
1/22
2/22
set.seed(666)
train_id <- sample(nrow(ddWIDE),50)
dat500 <- mutate(ddWIDE500,cancer = as.factor(cancer))
dat_model <- dat500[,-1]
train <- dat_model[train_id,]
test <- dat_model[-train_id,]
rf <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 100, importance = TRUE)
rf2 <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 200, importance = TRUE)
rf2 <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 200, importance = TRUE)
rf3 <- randomForest(cancer~., data = dat_model, subset = train_id, ntree = 130, importance = TRUE)
layout(matrix(c(1,2), nrow = 1), width = c(4, 1))
par(mar = c(5, 4, 4, 0))
plot(rf2, main = "Figure 4: Random Forest with Increasing Number of Trees")
par(mar = c(5, 0, 4, 2))
plot(c(0, 1), type = "n", axes = FALSE, xlab = "", ylab = "", main = "")
legend("top", colnames(rf2$err.rate), col = 1:4, cex = 0.8, fill = 1:4)
rfT <- table(yhat_rf3, test$cancer)
rownames(rfT) <- c("Classified as AML", "Classified as ALL")
colnames(rfT) <- c("True AML", "True ALL")
rfT
cc <- enetT %>%
left_join(rfT, by = c("Classified", "True")) %>%
left_join(svmlT, by = c("Classified", "True")) %>%
left_join(svmpT, by = c("Classified", "True")) %>%
mutate(Classified = c("AML", "ALL", "AML", "ALL"),
True = c("AML", "AML", "ALL", "ALL"))
enetT <- as.data.frame(enetT)
colnames(enetT) <- c("Classified", "True", "ENET")
rfT <- as.data.frame(rfT)
colnames(rfT) <- c("Classified", "True", "RF")
svmlT <- as.data.frame(svmlT)
colnames(svmlT) <- c("Classified", "True", "SVM (Linear)")
svmpT <- as.data.frame(svmpT)
colnames(svmpT) <- c("Classified", "True", "SVM (Polynomial)")
cc <- enetT %>%
left_join(rfT, by = c("Classified", "True")) %>%
left_join(svmlT, by = c("Classified", "True")) %>%
left_join(svmpT, by = c("Classified", "True")) %>%
mutate(Classified = c("AML", "ALL", "AML", "ALL"),
True = c("AML", "AML", "ALL", "ALL"))
cc
1/22
enetT <- as.data.frame(enetT)
colnames(enetT) <- c("Classified", "True", "ENET")
rfT <- as.data.frame(rfT)
colnames(rfT) <- c("Classified", "True", "RF")
svmlT <- as.data.frame(svmlT)
colnames(svmlT) <- c("Classified", "True", "SVM (Linear)")
svmpT <- as.data.frame(svmpT)
colnames(svmpT) <- c("Classified", "True", "SVM (Polynomial)")
cc <- enetT %>%
left_join(rfT, by = c("Classified", "True")) %>%
left_join(svmlT, by = c("Classified", "True")) %>%
left_join(svmpT, by = c("Classified", "True")) %>%
mutate(Classified = c("AML", "ALL", "AML", "ALL"),
True = c("AML", "AML", "ALL", "ALL"))
totalAcu <- c("Error Rate", "", "13.63%", "9.09%", "22.72%")
cc[nrow(cc) + 1, ] <- totalAcu
cc
1/22
totalAcu <- c("Error Rate", "", "13.63%", "4.54%", "9.09%", "22.72%")
cc[nrow(cc) + 1, ] <- totalAcu
kable(cc, caption = "Table 2: Overal Performance")
col2 <- seq(0,1,0.1)
errout <- rbind(col1,col2)
rownames(errout) <- c("Error", "Alpha")
kable(errout, caption = "Table 1")
